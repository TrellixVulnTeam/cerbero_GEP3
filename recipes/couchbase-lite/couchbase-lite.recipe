# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
import shutil
import logging
from cerbero.build.build import modify_environment

PC_TPL ='''\
prefix=${pcfiledir}/../..
exec_prefix=${prefix}
libdir=${exec_prefix}/lib

Name: Couchbase.Lite
Description: Couchbase.Lite framework for .NET
Version: %s
Libs: -r:${libdir}/cli/Couchbase.Lite-1.0/Couchbase.Lite.dll\
 -r:${libdir}/cli/Couchbase.Lite-1.0/SQLitePCL.raw.dll\
 -r:${libdir}/cli/Couchbase.Lite-1.0/SQLitePCL.ugly.dll
'''


class Recipe(recipe.Recipe):
    name = 'Couchbase.Lite'
    version = '1.3.1.1'
    licenses = [License.Apachev2]
    stype = SourceType.GIT
    btype = BuildType.CUSTOM
    deps = ['mono', 'Newtonsoft.Json', 'sqlite3']
    remotes = {'github': 'https://github.com/fluendo/couchbase-lite-net.git'}
    commit = 'github/release/1.3.1'
    files_cli = [
      'lib/cli/Couchbase.Lite-1.0/Couchbase.Lite.dll',
      'lib/cli/Couchbase.Lite-1.0/SQLitePCL.raw.dll',
      'lib/cli/Couchbase.Lite-1.0/SQLitePCL.ugly.dll'
    ]

    def prepare(self):
        super(Recipe, self).prepare()
        self.append_env = {}
        self.new_env =  {}
        if self.config.platform == Platform.DARWIN:
            self.append_env = {}
            self.new_env =  {'MONO_PATH' : None}
            self.new_env["PATH"] = os.environ["PATH"].replace('%s/build-tools/bin:%s/dist/darwin_x86_64/bin:' % (self.config.home_dir, self.config.home_dir), '')

    def extract(self):
        super(recipe.Recipe, self).extract()
        shell.call('git submodule init', self.build_dir)
        shell.call('git submodule update --recursive', self.build_dir)

    @modify_environment
    def compile(self):
        logging.info('Compiling Couchbase')
        shell.call("mono src/.nuget/NuGet.exe restore " \
                   "src/Couchbase.Lite.Net45.sln", self.build_dir)
        shell.call('xbuild src/Couchbase.Lite.Net45.sln /target:Couchbase_Lite_Net45 '
                   '/property:Configuration=Release /property:Archive=true', self.build_dir)
        shell.call('xbuild src/StorageEngines/SystemSQLite/storage.systemsqlite.net45/storage.systemsqlite.net45.csproj '
                   ' /property:SolutionDir=' + self.build_dir + '/src/'
                   ' /property:Configuration=Release /property:Archive=true', self.build_dir)

        if self.config.platform == Platform.DARWIN:
            self.__compile_mobile()

        self.create_nuget()

    def __compile_mobile(self):
        logging.info('Compiling iOS / Android')
        try:
            shell.call("mono src/.nuget/NuGet.exe restore " \
                    "src/Couchbase.Lite.Android.sln",
                    self.build_dir)
            shell.call('xbuild src/Couchbase.Lite.Android.sln '
                   '/property:Configuration=Release /property:Archive=true',
                   self.build_dir)
            shell.call('xbuild src/StorageEngines/SystemSQLite/storage.systemsqlite.droid/storage.systemsqlite.droid.csproj '
                   '/property:Configuration=Release /property:Archive=true',
                   self.build_dir)
        except:
            logging.info('Exception compiling Android')
        try:
            shell.call("mono src/.nuget/NuGet.exe restore " \
                    "src/Couchbase.Lite.iOS.sln",
                    self.build_dir)
            shell.call('xbuild src/Couchbase.Lite.iOS.sln '
                   '/property:Configuration=Release /property:Archive=true',
                   self.build_dir)
            shell.call('xbuild src/StorageEngines/SystemSQLite/storage.systemsqlite.ios/storage.systemsqlite.ios.csproj '
                   '/property:Configuration=Release /property:Archive=true',
                   self.build_dir)
        except:
            logging.info('Exception compiling iOS')

    def install(self):
        destdir = os.path.join(self.config.prefix, 'lib/cli/Couchbase.Lite-1.3')
        if not os.path.exists(destdir):
            os.makedirs(destdir)
        shell.call('cp staging/Couchbase.Lite/net45/*.dll %s' % destdir,
            self.build_dir)
        shell.call('cp staging/Couchbase.Lite.Storage.SystemSQLite/net45/*.dll %s' % destdir,
            self.build_dir)
        pc_file = os.path.join(self.config.prefix, 'lib/pkgconfig/couchbase-lite.pc')
        with open(pc_file, 'w+') as f:
            f.write(PC_TPL % self.version)
        nugetdir = os.path.join(self.config.prefix, 'share', 'nuget')
        if not os.path.exists(nugetdir):
            os.makedirs(nugetdir)
        shutil.copy(os.path.join(self.build_dir, 'Couchbase.Lite.LM.' + str(self.version) + '.nupkg'),
                nugetdir)
        shutil.copy(os.path.join(self.build_dir, 'Couchbase.Lite.Storage.SystemSQLite.LM.' + str(self.version) + '.nupkg'),
                nugetdir)

    def create_nuget(self):
        logging.info('Creating nuspec')
        nuspec = os.path.join(self.build_dir, 'couchbase-lite.nuspec')
        shutil.copy(os.path.join(self.build_dir, 'packaging', 'nuget', 'couchbase-lite.nuspec'),
                nuspec)
        replacements = {'<id>Couchbase.Lite</id>': '<id>Couchbase.Lite.LM</id>'}
        replacements['$version$'] = self.version
        # We only build Android and iOS nuget packages in OS X
        if self.config.platform != Platform.DARWIN:
            replacements['<file target="lib/MonoAndroid" src="staging/Couchbase.Lite/MonoAndroid/*" />'] = ""
            replacements['<file target="lib/Xamarin.iOS10" src="staging/Couchbase.Lite/Xamarin.iOS10/*" />'] = ""

        # Windows needs backslashes in the path
        if self.config.platform == Platform.WINDOWS:
            net45lib = '<file target="lib/net45" src="staging/Couchbase.Lite/net45/*" />'
            net45libfixed = '<file target="lib\\net45" src="staging\\Couchbase.Lite\\net45\\*" />'
            replacements[net45lib] = net45libfixed

        # Remove Net35
        replacements['<file target="lib/net35" src="staging/Couchbase.Lite/net35/*" />'] = ""

        replacements['Couchbase.Lite.Storage.SystemSQLite'] = "Couchbase.Lite.Storage.SystemSQLite.LM"
        shell.replace(nuspec, replacements)

        # Package also SystemSQL
        nuspec_systemsqlite = os.path.join(self.build_dir, 'couchbase-lite-storage-systemsqlite.nuspec')
        shutil.copy(os.path.join(self.build_dir, 'packaging', 'nuget', 'couchbase-lite-storage-systemsqlite.nuspec'),
                nuspec_systemsqlite)

        replacements = {'<id>Couchbase.Lite.Storage.SystemSQLite</id>': '<id>Couchbase.Lite.Storage.SystemSQLite.LM</id>'}
        replacements['$version$'] = self.version

        # We only build Android and iOS nuget packages in OS X
        if self.config.platform != Platform.DARWIN:
            replacements['<file target="lib/MonoAndroid/" src="staging/Couchbase.Lite.Storage.SystemSQLite/MonoAndroid/*" />'] = ""
            replacements['<file target="lib/Xamarin.iOS10/" src="staging/Couchbase.Lite.Storage.SystemSQLite/Xamarin.iOS10/*" />'] = ""

        # Windows needs backslashes in the path
        if self.config.platform == Platform.WINDOWS:
            net45lib = '<file target="lib/net45/" src="staging/Couchbase.Lite.Storage.SystemSQLite/net45/*" />'
            net45libfixed = '<file target="lib\\net45\\" src="staging\\Couchbase.Lite.Storage.SystemSQLite\\net45\\*" />'
            replacements[net45lib] = net45libfixed

        # Remove Net35
        replacements['<file target="lib/net35/" src="staging/Couchbase.Lite.Storage.SystemSQLite/net35/*" />'] = ""
        shell.replace(nuspec_systemsqlite, replacements)

        try:
            shell.call('mono src/.nuget/NuGet.exe pack -Verbosity detailed -BasePath . couchbase-lite.nuspec',
                    self.build_dir)
            shell.call('mono src/.nuget/NuGet.exe pack -Verbosity detailed -BasePath . couchbase-lite-storage-systemsqlite.nuspec',
                    self.build_dir)
        except:
            pass

