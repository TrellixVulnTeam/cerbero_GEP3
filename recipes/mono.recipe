# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
from cerbero.utils import shell

class Recipe(recipe.Recipe):
    name = 'mono'
    version = '4.6.0'
    licenses = [License.LGPL]
    stype = SourceType.TARBALL
    url = 'http://download.mono-project.com/sources/mono/mono-%(version)s.245.tar.bz2'
    configure_options = ' --with-gc=included --with-sgen=yes '\
                        ' --with-preview=yes' \
                        ' --disable-dtrace ' \
                        ' --with-mcs-docs=no '
    config_sh = 'sh autogen.sh'
    files_bins = ['mono-sgen']
    files_libs = ['libmonosgen-2.0']
    files_posix_helper = ['%(sdir)s/libMonoPosixHelper%(srext)s']
    files_config = ['etc/mono/config', 'etc/mono/4.5/machine.config']
    files_devel = [
        'include/mono-2.0',
        'lib/mono/2.0-api',
        'lib/mono/4.0-api',
        'lib/mono/4.5',
        'lib/mono/4.5-api',
        'lib/pkgconfig/mono-2.pc',
        'lib/pkgconfig/mono.pc',
    ]

    patches = [
        'mono/0001-System.ServiceModel-Fix-DuplexClient-initialization-.patch',
        'mono/0002-System.ServiceMode-Fix-XML-parsing-of-EndpointAddres.patch',
        'mono/0003-System.ServiceModel.Discovery-Fix-deadlock-receiving.patch',
        'mono/0004-System.ServiceModel.Discovery-Fix-exception-when-Loc.patch',
        'mono/0005-System.ServiceModel.Discovery-Add-integration-test-f.patch',
        'mono/0006-System.ServiceMode-Create-unit-test-for-46971.patch',
        'mono/0007-System.ServiceModel.Discovery-Fix-messages-validatio.patch',
    ]

    def prepare(self):
        if self.config.target_platform == self.config.platform and self.config.target_platform == Platform.WINDOWS:
            raise InvalidRecipeError()
        if self.config.target_platform == Platform.WINDOWS:
            self.configure_options += ' --without-x --enable-win32-dllmain=yes --with-libgc-threads=win32'
        else:
            self.deps = ['libgdiplus']
        if self.config.target_platform == Platform.DARWIN:
            self.append_env = {'LDFLAGS': ' -lcharset -lintl'}
            self.configure_options += ' --without-x'
        else:
            self.configure_options += ' --without-sigaltstack'

    def extract(self):
        super(recipe.Recipe, self).extract()
        shell.replace(os.path.join (self.build_dir, 'data', 'config.in'),
                {'@prefix@/@reloc_libdir@/':''})

    def post_install(self):
        config = os.path.join(self.config.prefix, 'etc', 'mono', 'config')
        prefix = self.config.libdir
        if prefix[-1] != '/':
            prefix += '/'
        shell.replace(config, {prefix: '',
            'libintl.dylib': 'libintl.8.dylib',
            'libintl.so': 'libintl.8.so',
            'libgdiplus.dylib': 'libgdiplus.0.dylib',
            'libgdiplus.so': 'libgdiplus.so.0',
            })
        shell.call ('rm -rf lib/mono/2.0/nunit*', self.config.prefix)
        shell.call ('rm -rf lib/mono/4.5/nunit*', self.config.prefix)
        shell.call ('rm -rf lib/mono/gac/*/2.4.8.0__96d09a1eb7f44a77',
                self.config.prefix)
