# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
import shutil
import cerbero.utils.messages as m
from cerbero.utils import shell

class Recipe(recipe.Recipe):
    name = 'mono'
    version = '5.2.0'
    licenses = [License.LGPL]
    stype = SourceType.CUSTOM
    btype = BuildType.CUSTOM

    _mono = [
        'bin/al',
        'bin/mcs',
        'bin/mcs.bat',
        'bin/csc',
        'bin/csc.bat',
        'bin/dmcs',
        'bin/gacutil',
        'bin/intl.dll',
        'bin/mono-2.0-sgen.dll',
        'bin/mono-sgen.exe',
        'bin/MonoPosixHelper.dll',
        'bin/resgen',
        'bin/msbuild',
        'bin/xbuild',
        'bin/zlib1.dll',
        'etc/mono',
        'lib/mono/gac',
        'lib/mono/2.0-api',
        'lib/mono/4.0-api',
        'lib/mono/4.5',
        'lib/mono/4.5-api',
        'lib/mono/4.7-api',
        'lib/mono/msbuild',
        'lib/mono/xbuild',
        'lib/mono/xbuild-frameworks',
        'include/mono-2.0',
        'lib/mono-2.0-sgen.lib',
        'lib/pkgconfig/monosgen-2.pc',
        'lib/pkgconfig/mono-2.pc',
        'lib/pkgconfig/mono.pc',
    ]

    files_bins = ['mono-sgen', 'mono']
    files_bin = [
        'bin/intl.dll',
        'bin/mono-2.0-sgen.dll',
        'bin/zlib1.dll',
        'bin/cygpath'
    ]

    files_posix_helper = ['%(sdir)s/MonoPosixHelper%(srext)s']
    files_config = ['etc/mono/config', 'etc/mono/4.5/machine.config']
    files_devel = [
        'bin/al',
        'bin/mcs',
        'bin/mcs.bat',
        'bin/csc',
        'bin/csc.bat',
        'bin/dmcs',
        'bin/gacutil',
        'bin/resgen',
        'bin/xbuild',
        'bin/msbuild',
        'lib/mono/gac',
        'lib/mono/2.0-api',
        'lib/mono/4.0-api',
        'lib/mono/4.5',
        'lib/mono/4.5-api',
        'lib/mono/4.7-api',
        'lib/mono/msbuild',
        'lib/mono/xbuild',
        'lib/mono/xbuild-frameworks',
        'include/mono-2.0',
        'lib/mono-2.0.lib',
        'lib/monosgen-2.0.lib',
        'lib/pkgconfig/monosgen-2.pc',
        'lib/pkgconfig/mono-2.pc',
        'lib/pkgconfig/mono.pc',
    ]

    def prepare(self):
        if self.config.target_platform != self.config.platform or self.config.target_platform != Platform.WINDOWS:
            raise InvalidRecipeError()

    def install(self):
        # this needs that the official Mono installer with the version specified in the recipe should be installed
        # at location C:\ProgramFiles(x86)\Mono-"Version", to obtain the proper version mono installation package
        # go to https://download.mono-project.com/archive/
        pf = os.environ.get('PROGRAMFILES(X86)', os.environ['PROGRAMFILES'])
        mono_prefix_dir = os.path.join(pf, 'Mono-%s' % self.version)
        exclude_dirs = ['atk-sharp', 'gdk-sharp', 'glade-sharp', 'glib-sharp', 'gtk-sharp', 'pango-sharp']
        if not os.path.exists(mono_prefix_dir):
            m.error("ERROR: Mono not found in path %s" % mono_prefix_dir)
            raise FatalError("Mono not found!")
        for f in self._mono:
            src = os.path.join(mono_prefix_dir, f)
            dest = os.path.join(self.config.prefix, f)
            if os.path.isdir(src):
                shell.copy_dir (src, dest, exclude_dirs)
            elif os.path.isfile(src):
                if not os.path.exists(os.path.dirname(dest)):
                    os.makedirs(os.path.dirname(dest))
                shutil.copy(src, dest)
            else:
                print "WARNING: %s not found" % f

        shutil.move(os.path.join(self.config.prefix, 'lib', 'mono-2.0-sgen.lib'),
                    os.path.join(self.config.prefix, 'lib', 'monosgen-2.0.lib'))
        shutil.copy(os.path.join(self.config.prefix, 'lib', 'monosgen-2.0.lib'),
                    os.path.join(self.config.prefix, 'lib', 'mono-2.0.lib'))

        shutil.copy(os.path.join(self.config.prefix, 'bin', 'mono-sgen.exe'),
                    os.path.join(self.config.prefix, 'bin', 'mono.exe'))
        shutil.copy(os.path.join(self.config.prefix, 'bin', 'mcs'),
                    os.path.join(self.config.prefix, 'bin', 'dmcs'))
        shutil.copy(self.relative_path('cygpath'),
                    os.path.join(self.config.prefix, 'bin', 'cygpath'))
        shutil.copy(self.relative_path('config'),
                    os.path.join(self.config.prefix, 'etc', 'mono', 'config'))
