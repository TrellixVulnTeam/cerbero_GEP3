From a3bea26ebce7ca190682ff2857d77bb5e988b780 Mon Sep 17 00:00:00 2001
From: Andoni Morales Alastruey <ylatuya@gmail.com>
Date: Sun, 13 Nov 2016 14:33:49 +0100
Subject: [PATCH 6/7] [System.ServiceMode] Create unit test for #46971

---
 .../System.ServiceModel_test.dll.sources           |   1 +
 .../System.ServiceModel.Dispatcher/Bug46971Test.cs | 120 +++++++++++++++++++++
 2 files changed, 121 insertions(+)
 create mode 100644 mcs/class/System.ServiceModel/Test/System.ServiceModel.Dispatcher/Bug46971Test.cs

diff --git a/mcs/class/System.ServiceModel/System.ServiceModel_test.dll.sources b/mcs/class/System.ServiceModel/System.ServiceModel_test.dll.sources
index dd2dc7f..b9024ea 100644
--- a/mcs/class/System.ServiceModel/System.ServiceModel_test.dll.sources
+++ b/mcs/class/System.ServiceModel/System.ServiceModel_test.dll.sources
@@ -129,6 +129,7 @@ System.ServiceModel.Dispatcher/ActionFilterTest.cs
 System.ServiceModel.Dispatcher/Bug652331Test.cs
 System.ServiceModel.Dispatcher/Bug652331_2Test.cs
 System.ServiceModel.Dispatcher/Bug32886Test.cs
+System.ServiceModel.Dispatcher/Bug46971Test.cs
 System.ServiceModel.Dispatcher/ChannelDispatcherTest.cs
 System.ServiceModel.Dispatcher/DispatchOperationTest.cs
 System.ServiceModel.Dispatcher/DispatchRuntimeTest.cs
diff --git a/mcs/class/System.ServiceModel/Test/System.ServiceModel.Dispatcher/Bug46971Test.cs b/mcs/class/System.ServiceModel/Test/System.ServiceModel.Dispatcher/Bug46971Test.cs
new file mode 100644
index 0000000..1f01677
--- /dev/null
+++ b/mcs/class/System.ServiceModel/Test/System.ServiceModel.Dispatcher/Bug46971Test.cs
@@ -0,0 +1,120 @@
+//
+// Author:
+//       Andoni Morales Alastruey <ylatuya@gmail.com>
+//
+// Copyright (c) 2017 Andoni Morales Alastruey.
+//
+// Permission is hereby granted, free of charge, to any person obtaining a copy
+// of this software and associated documentation files (the "Software"), to deal
+// in the Software without restriction, including without limitation the rights
+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+// copies of the Software, and to permit persons to whom the Software is
+// furnished to do so, subject to the following conditions:
+//
+// The above copyright notice and this permission notice shall be included in
+// all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+// THE SOFTWARE.
+using System;
+using System.Linq;
+using System.Runtime.Serialization;
+using System.ServiceModel;
+using System.Threading.Tasks;
+using NUnit.Framework;
+using MonoTests.Helpers;
+
+namespace MonoTests.System.ServiceModel.Dispatcher
+{
+	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
+	[global::System.SerializableAttribute()]
+	[global::System.Diagnostics.DebuggerStepThroughAttribute()]
+	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
+	[global::System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.onvif.org/ver10/schema")]
+	public partial class VideoSource
+	{
+	}
+
+	[global::System.Diagnostics.DebuggerStepThroughAttribute()]
+	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
+	[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
+	[global::System.ServiceModel.MessageContractAttribute(WrapperName = "GetVideoSources", WrapperNamespace = "http://www.onvif.org/ver10/media/wsdl", IsWrapped = true)]
+	public partial class GetVideoSourcesRequest
+	{
+	}
+
+	[global::System.Diagnostics.DebuggerStepThroughAttribute()]
+	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
+	[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
+	[global::System.ServiceModel.MessageContractAttribute(WrapperName = "GetVideoSourcesResponse", WrapperNamespace = "http://www.onvif.org/ver10/media/wsdl", IsWrapped = true)]
+	public partial class GetVideoSourcesResponse
+	{
+		[global::System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://www.onvif.org/ver10/media/wsdl", Order = 0)]
+		[global::System.Xml.Serialization.XmlElementAttribute("VideoSources")]
+		public VideoSource[] VideoSources;
+
+		public GetVideoSourcesResponse()
+		{
+		}
+
+		public GetVideoSourcesResponse(VideoSource[] VideoSources)
+		{
+			this.VideoSources = VideoSources;
+		}
+	}
+
+	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
+	[global::System.ServiceModel.ServiceContractAttribute(Namespace = "http://www.onvif.org/ver10/media/wsdl", ConfigurationName = "Media.Media")]
+	public interface IMedia
+	{
+		// CODEGEN: Parameter 'VideoSources' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
+		[global::System.ServiceModel.OperationContractAttribute(Action = "http://www.onvif.org/ver10/media/wsdl/GetVideoSources/")]
+		[global::System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
+		[return: global::System.ServiceModel.MessageParameterAttribute(Name = "VideoSources")]
+		GetVideoSourcesResponse GetVideoSources(GetVideoSourcesRequest request);
+
+		[global::System.ServiceModel.OperationContractAttribute(Action = "http://www.onvif.org/ver10/media/wsdl/GetVideoSources/")]
+		Task<GetVideoSourcesResponse> GetVideoSourcesAsync(GetVideoSourcesRequest request);
+	}
+
+	public class MediaService : IMedia
+	{
+		[return: MessageParameter(Name = "VideoSources")]
+		public GetVideoSourcesResponse GetVideoSources(GetVideoSourcesRequest request)
+		{
+			var response = new GetVideoSourcesResponse();
+
+			response.VideoSources = new VideoSource[] { new VideoSource () };
+			return response;
+		}
+
+		public Task<GetVideoSourcesResponse> GetVideoSourcesAsync(GetVideoSourcesRequest request)
+		{
+			return Task.FromResult(GetVideoSources(request));
+		}
+	}
+
+	[TestFixture]
+	public class Bug46971
+	{
+		[Test]
+		public void Bug46971_Test ()
+		{
+			// Init service
+			int port = NetworkHelpers.FindFreePort ();
+			ServiceHost serviceHost = new ServiceHost (typeof (MediaService), new Uri ("http://localhost:" + port + "/Onvif/service_media"));
+			
+			try {
+				serviceHost.Open ();
+				serviceHost.Close ();
+			} catch (Exception ex) {
+				Assert.Fail (ex.Message);
+			}
+		}
+	}
+}
-- 
2.8.4 (Apple Git-73)

