# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python

from cerbero.utils import shell

class Recipe(recipe.Recipe):
    name = 'gnutls'
    version = '3.3.14'
    maj_ver = '.'.join(version.split('.')[0:2])
    url = 'https://www.gnupg.org/ftp/gcrypt/{0}/v{1}/{0}-{2}.tar.xz'.format(name, maj_ver, version)
    stype = SourceType.TARBALL
    # main library is LGPLv2+ and binaries and libgnutls-openssl are
    # GPLv3+ and defined below
    licenses = [License.LGPLv2Plus]
    configure_options = "--enable-local-libopts --disable-guile \
        --enable-static --enable-zlib --disable-tests --enable-shared --disable-doc"
    deps = ['zlib', 'nettle', 'libtasn1']
    # GnuTLS uses error.h, which is a GNU extension only available with glibc
    # bionic-fixup provides that to us for all platforms
    platform_deps = {
        Platform.WINDOWS: ['bionic-fixup'],
        Platform.ANDROID: ['bionic-fixup'],
        Platform.IOS: ['bionic-fixup'],
        Platform.DARWIN: ['bionic-fixup']
    }
    patches = [
        name + "/0001-configure-vasprintf-is-defined-in-stdio.h.patch",
        name + "/secure_snprintf.patch",
        name + "/0002-disable-system-ios.patch"]
    autoreconf = True

    files_libs = ['libgnutls', 'libgnutlsxx']
    files_libs_extra = ['libgnutls-openssl']
    licenses_libs_extra = [License.GPLv3]
    files_bins = ['gnutls-cli', 'gnutls-serv', 'gnutls-cli-debug']
    licenses_bins = [License.GPLv3]
    files_devel = ['lib/pkgconfig/gnutls.pc', 'include/gnutls']
    files_lang = ['gnutls']

    def prepare(self):
        if self.config.target_platform == Platform.WINDOWS:
            self.configure_options += ' --enable-threads=win32'
            self.can_use_configure_cache = False
        if self.config.target_platform == Platform.DARWIN:
            self.configure_options += ' --disable-hardware-acceleration'
        if self.config.target_platform == Platform.ANDROID:
            self.configure_options += ' --disable-cxx'
        if self.config.target_platform == Platform.IOS:
            if self.config.target_arch == Architecture.ARM64:
                self.configure_options += ' --disable-hardware-acceleration'
            self.configure_options += ' --disable-cxx'

    def configure(self):
        if self.config.target_platform == Platform.ANDROID:
            # On Android, SIZE_MAX is define under limits.h
            shell.replace(os.path.join(self.build_dir, 'gl', 'read-file.c'),
                {'#include <stdint.h>':
                 '#include <limits.h>'})
        # Call configure from the base class
        super(recipe.Recipe, self).configure()
        if self.config.target_platform == Platform.DARWIN:
            replacements = {
                    '#define HAVE_CLOCK_GETTIME': '//#define HAVE_CLOCK_GETTIME',
                    '#define HAVE_CLOCK_SETTIME': '//#define HAVE_CLOCK_SETTIME',
                    }
            shell.replace(os.path.join(self.build_dir, 'config.h'), replacements)
