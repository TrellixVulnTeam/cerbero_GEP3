# This file contains the default configuration to compile for iPhoneOS
# platforms. It contains sensitive enviroment configuration that
# shouldn't be modified unless you know what you are doing.
# PLEASE, DO NOT EDIT THIS FILE

import os
from cerbero.utils import shell
from cerbero.config import Architecture, DistroVersion
from cerbero.errors import FatalError

variants += ['nogtk', 'noclutter', 'nopython', 'notestspackage']

# We don't want anything from macports detected in configure and
# used later. System libs are passed through the -isysroot option
allow_system_libs=False

ios_min_version = '8.0'

if target_distro_version == distro_version:
    target_distro_version = None

if target_arch in [Architecture.X86, Architecture.X86_64]:
    ios_platform = 'iPhoneSimulator'
else:
    ios_platform = 'iPhoneOS'

iphone_platform = '/Applications/Xcode.app/Contents/Developer/Platforms/%s.platform/Developer' % ios_platform
toolchain_path = '%s/usr/bin' % iphone_platform

# Find the installed SDK
_sdk_version = None
for d,v in [
            (DistroVersion.IOS_11_4, '11.4'),
            (DistroVersion.IOS_7_0, '7.0'),
            (DistroVersion.IOS_6_1, '6.1'),
            (DistroVersion.IOS_6_0, '6.0')]:
  sysroot = os.path.join(iphone_platform, 'SDKs', '%s%s.sdk' %(ios_platform, v))
  if os.path.exists (sysroot):
     _sdk_version = d
     break

if target_distro_version is not None and target_distro_version != _sdk_version:
    raise FatalError("The SDK for %s is not installed" % target_distro_version)
elif _sdk_version is None:
    raise FatalError("The SDK for iOS could not be found in your system")
else:
    target_distro_version = _sdk_version


ccache = use_ccache and 'ccache ' or ''
extra_cflags='-Wall -g -Os'
extra_ldflags='-Wno-error=unused-command-line-argument'
if target_arch == Architecture.ARM64:
    arch_cflags = ' -arch arm64 -pipe'
    host = 'aarch64-apple-darwin10'
elif target_arch == Architecture.ARMv7S:
    arch_cflags = ' -arch armv7s -mcpu=cortex-a9 -pipe'
    host = 'arm-apple-darwin10'
elif target_arch == Architecture.ARMv7:
    arch_cflags = ' -arch armv7 -mcpu=cortex-a8 -pipe'
    host = 'arm-apple-darwin10'
elif target_arch == Architecture.ARM:
    arch_cflags = ' -arch armv6 -mcpu=arm1176jzf-s -pipe'
    host = 'arm-apple-darwin10'
elif target_arch == Architecture.X86:
    arch_cflags = ' -arch i386 '
    host = 'i386-apple-darwin10'
elif target_arch == Architecture.X86_64:
    arch_cflags = ' -arch x86_64 '
    host = 'x86_64-apple-darwin10'
elif target_arch == Architecture.UNIVERSAL:
    arch_cflags=''
else:
  raise FatalError("Arch %s not supported" % target_arch)

# Toolchain environment

if target_distro_version in [DistroVersion.IOS_6_1, DistroVersion.IOS_6_1]:
  os.environ['CC']= 'llvm-gcc-4.2'
  os.environ['CXX']= 'llvm-g++-4.2'
else:
  os.environ['CC']= 'clang'
  os.environ['CXX']= 'clang++'
  extra_cflags += ' -Wno-error=format-nonliteral -Wno-error=implicit-function-declaration '


os.environ['PATH'] = '%s:%s' % (toolchain_path, os.environ['PATH'])
os.environ['OBJC'] = os.environ['CC']
os.environ['CPP']= "%s -E" % os.environ['CC']
os.environ['CXXPP']= os.environ['CPP']
os.environ['LD']= 'ld'
os.environ['AR']= 'ar'
os.environ['NM']= 'nm'
os.environ['NMEDIT']= 'nmedit'
os.environ['RANLIB']= 'ranlib'
os.environ['CPPFLAGS'] = '{} -isysroot {} '.format(arch_cflags, sysroot)
os.environ['CFLAGS'] = os.environ['CPPFLAGS']
os.environ['LDFLAGS'] = os.environ['CPPFLAGS']
if ios_platform == 'iPhoneOS':
  os.environ['CFLAGS'] += '-miphoneos-version-min={} '.format(ios_min_version)
  os.environ['LDFLAGS'] += '-miphoneos-version-min={0} -Wl,-iphoneos_version_min,{0} '.format(ios_min_version)
  os.environ['CCASFLAGS'] = '-miphoneos-version-min={} '.format(ios_min_version)
else:
  os.environ['CFLAGS'] += '-mios-simulator-version-min={} '.format(ios_min_version)
  os.environ['LDFLAGS'] += '-mios-simulator-version-min={0} -Wl,-ios_simulator_version_min,{0} '.format(ios_min_version)
os.environ['CFLAGS'] += extra_cflags
os.environ['LDFLAGS'] += extra_ldflags
os.environ['OBJCFLAGS'] = os.environ['CFLAGS']
os.environ['OBJLDFLAGS'] = os.environ['LDFLAGS']
os.environ['CXXFLAGS'] = os.environ['CFLAGS']

os.environ['AS']= 'as'
if target_arch in [Architecture.X86, Architecture.X86_64]:
    os.environ.pop('GAS', None)
else:
    os.environ['GAS']= '%s %s %s -fembed-bitcode' % ('gas-preprocessor.pl', os.environ['CC'], os.environ['CFLAGS'])

if ios_platform == "iPhoneOS" or ios_platform == "iPhoneSimulator":
    simulator_headers = '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include'
    for missing_header in ["bzlib.h", "crt_externs.h"]:
        missing_path = os.path.join(sysroot, "usr", "include", missing_header)
        if not os.path.lexists(missing_path):
            # FIXME This is not smart especially as we need to sudo
            print "We need to create a syslink between %s and %s as they are missing in the device SDK" %(os.path.join(simulator_headers, missing_header), missing_path)
            shell.call("sudo ln -s %s %s" %(os.path.join(simulator_headers, missing_header), missing_path))


if use_ccache:
    os.environ['CC'] = 'ccache  %s' % os.environ['CC']
    os.environ['CXX'] = 'ccache  %s' % os.environ['CXX']

# For GLib
os.environ['glib_cv_stack_grows'] = 'yes'
os.environ['glib_cv_uscore'] = 'no'
os.environ['ac_cv_func_posix_getpwuid_r'] = 'yes'
os.environ['ac_cv_func_posix_getgrgid_r'] = 'yes'
os.environ['gt_cv_c_wchar_t'] = 'no'
os.environ['ac_cv_func__NSGetEnviron'] = 'no'

# For gstreamer
if target_arch in [Architecture.ARM64]:
    os.environ['as_cv_unaligned_access'] = 'no'

# For pixman
os.environ['ac_cv_tls'] = 'none'
